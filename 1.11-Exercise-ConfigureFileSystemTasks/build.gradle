/*
    In this series of exercies you'll be configuring tasks to copy and delete
    files as well as build archives. This example contains some sample files 
    that you'll be using to complete the exercises below.

    Exercises:

    1. Create a task named "copyWeb". This task should perform the following:
        a) Copy files from "src/web" to a folder "build/web".
        b) Copy all .txt files from "src/docs" to folder "build/web/help".

    2. Create a task named "bundleWeb". This task should perform the following:
        a) Create a zip file located in the "build" folder named "web.zip".
        b) Include all the files copied by the "copyWeb" task except the
        "images" directory.

    3. Create a task named "unpackBundle". This task should perform the following:
        a) Expand the zip file created by the "bundleWeb" task.
        b) Copy the contents to a folder "build/exploded".

    HINT: There isn't an UnZip task, so what task type do you need?

    4. Create a task named "deleteHelp". This task should perform the following:
        a) Delete the "help" folder created by the "copyWeb" task.
*/

//     1. Create a task named "copyWeb". This task should perform the following:

task copyWeb(type: Copy) {

//         a) Copy files from "src/web" to a folder "build/web".
    from ('src/web'){
        into 'web'
    }

//         b) Copy all .txt files from "src/docs" to folder "build/web/help".
    from ('src/docs'){
        include '*.txt'
        into 'web/help'
    }
    
    into 'build'
}
 
//     2. Create a task named "bundleWeb". This task should perform the following:

task bundleWeb(type: Zip, , dependsOn: copyWeb) {

//        a) Create a zip file located in the "build" folder named "web.zip".
    baseName = "web" // name of the zip 
    
    destinationDir = file ( "build" ) // directory where to place the zip

//        b) Include all the files copied by the "copyWeb" task except the
//         "images" directory.
    
    exclude "images" // what to exclude from the zip - images was in the
                     // web folder
    
    from "build/web" // directory having the files we need to zip

}

//     3. Create a task named "unpackBundle". This task should perform the following:

// credits: http://mrhaki.blogspot.co.ke/2012/06/gradle-goodness-unpacking-archive.html
task unpackBundle(type: Copy, dependsOn: bundleWeb) {

    def zipFile = file("${buildDir}/web.zip") // refer to the zip file we created earlier. it is web.zip relative to the build directory
    
    def outputDir = file("${buildDir}/exploded") // directory to output the zip files to. it's exploded relative to the build directory
    
//         a) Expand the zip file created by the "bundleWeb" task.

    // zipTree - access the contents of an archive
    from zipTree(zipFile) // our source for the copy is the zip file

//         b) Copy the contents to a folder "build/exploded".

    into outputDir // copy the contents to the output directory
 
//     HINT: There isn't an UnZip task, so what task type do you need? 
//     ANSWER: Copy

}

//     4. Create a task named "deleteHelp". This task should perform the following:

task deleteHelp(type: Delete, dependsOn: copyWeb) {

//         a) Delete the "help" folder created by the "copyWeb" task.
    delete "${buildDir}/web/help"

}
